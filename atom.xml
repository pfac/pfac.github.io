<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seventeen Past One]]></title>
  <link href="http://blog.iampfac.com/atom.xml" rel="self"/>
  <link href="http://blog.iampfac.com/"/>
  <updated>2015-02-11T00:28:21+00:00</updated>
  <id>http://blog.iampfac.com/</id>
  <author>
    <name><![CDATA[pfac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[About Security]]></title>
    <link href="http://blog.iampfac.com/blog/2015/02/10/about-security/"/>
    <updated>2015-02-10T20:55:51+00:00</updated>
    <id>http://blog.iampfac.com/blog/2015/02/10/about-security</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img class="right" src="http://blog.iampfac.com/images/security-fail.jpg" width="450" title="&#34;'Much numbers, wow security'&#34;" alt="&#34;'Much numbers, wow security'&#34;"></p>

<p>Here&rsquo;s my daily dilemma. I have an application, it uses Spring Security, and I needed to find a way to disable security altogether with a property in a configuration file. This made me wonder whether I really should do things as I am.</p>

<p>Currently, security rules are placed in the application core. This means that once security is enabled, the business logic incorporates the security rules. This also allows for services, which <em>perform</em> the application use cases, to be fully secured by default.</p>

<p>I do not question whether these rules should be in the core. The only other option would be in an higher layer (a delivery mechanism), but this would require me to duplicate this logic in every such mechanism, which we all now would end up in every god damned developer that wanders the repository to have its own view of how security should be implemented in the delivery mechanism he happens to be working <em>today</em>.</p>

<p>Even so, I do question where and how this logic should be activated. While I wouldn&rsquo;t have anything against it being activated at all times (1) I cannot stop anyone from reimplementing the configuration class that activates it and replace it with one that does not and (2) there are <em>some</em> cases where the convenience of having the security configuration disabled surpasses the risks, even if only temporarily.</p>

<p><small>Truth be told, I don&rsquo;t quite get it either but it is one of the requirements&hellip;</small></p>

<p>Here&rsquo;s what I came up with.</p>

<p>Regarding the how, I have to find a way to hijack the application context configuration and disable security before it is set up. That much I have solved already by placing an application context initializer that handles this. The problem now is that it must be controlled by a property in a configuration file, which have not been loaded by now. I seem to have found a way to perform this by hand but I do question whether this shouldn&rsquo;t be done by the actual application initializer in the final delivery mechanism, instead of the core itself.</p>

<p>Despite having the application context initializer in the core, the fact remains that it has to be called explicitly, either in a <code>web.xml</code> or another initializer. So should I really have all this in the core, or should I just follow an approach of preparation in the core, and let the outer layers handle this part of the configuration?</p>

<p><img class="center" src="http://blog.iampfac.com/images/security-fail.gif" title="&#34;Nobody is safe...&#34;" alt="&#34;Nobody is safe...&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip&trick: Eclipse not building Maven project automatically]]></title>
    <link href="http://blog.iampfac.com/blog/2014/11/12/eclipse-not-building-maven-project-automatically/"/>
    <updated>2014-11-12T12:06:26+00:00</updated>
    <id>http://blog.iampfac.com/blog/2014/11/12/eclipse-not-building-maven-project-automatically</id>
    <content type="html"><![CDATA[<p><em>Problem</em>: Eclipse not building a Maven project automatically before deploying it</p>

<!-- more -->


<p>Yesterday I spent over an hour trying to figure out why my webapp was not picking up my Spring annotations properly. After that dreadful 1h+, I found out that Eclipse was not building my webapp automatically before deploying it to the application server. This was the point at which I had to get up, leave the office and go to the gym, otherwise my laptop would now be reduced to its most elementary components.</p>

<p>Today I found out why. I created this project manually instead of using <code>mvn archetype:generate</code> because I didn&rsquo;t want to use an archetype (I like to have control over the stuff that&rsquo;s placed in my projects and I have no appreciation for the placeholders the generator creates).</p>

<p>When I created the <code>pom.xml</code> manually, I gave the project the type <code>pom</code>, because I meant to create several submodules inside it. I configured the project to be a Maven project at this time (right-click on the project > <em>Configure</em>  > <em>Convert to Maven Project</em>).</p>

<p>Later I decided I wouldn&rsquo;t be adding submodules for now, instead having this single project generate a WAR file. I changed the POM file to have the type <code>war</code>. Eclipse immediately detected the <code>web.xml</code> file and allowed me to deploy the project to a server. Yet, apparently, it did not know the project has to be built before, or it didn&rsquo;t know how.</p>

<p>To fix it, <strong>make sure you update the Maven project in Eclipse</strong> (right-click on the project > <em>Maven</em> > <em>Update project</em>).</p>

<p>I still think it should have picked it up automatically&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Mighty Maven]]></title>
    <link href="http://blog.iampfac.com/blog/2014/11/12/all-mighty-maven/"/>
    <updated>2014-11-12T01:14:00+00:00</updated>
    <id>http://blog.iampfac.com/blog/2014/11/12/all-mighty-maven</id>
    <content type="html"><![CDATA[<p>The long overdue introduction to Maven that I promised myself I would write.</p>

<!-- more -->


<h2>What is Maven</h2>

<p>Quick answer: <strong>EVERYTHING</strong></p>

<p><img class="center" src="http://blog.iampfac.com/images/everything.gif" title="&#34;Maven does EVERYTHING&#34;" alt="&#34;Maven does EVERYTHING&#34;"></p>

<p>Ok, not really <em>everything</em>. But it sure seems like it. At least to the new guy.</p>

<p>Maven may have (<em>at least</em>) the following jobs within an application:</p>

<ul>
<li><strong>Manifest</strong>, holding information about the project and its structure;</li>
<li><strong>Dependency manager</strong>, having the list of dependencies and automatically load them from the registered repositories;</li>
<li><strong>Task runner</strong>, like <code>make</code> or <code>jake</code> but more confusing</li>
<li><strong>Builder</strong>, compiling all the code and packaging it nicely (this part is convenient, to say the least).</li>
</ul>


<p>Personally, I felt like these were too many things to a single tool. But apparently the Java world had been happy with it for a long time, so why would I fight it?</p>

<p>An year later, I&rsquo;ve seen a lot of things that make me appreciate Maven. Using a single <code>pom.xml</code> file (yes, I also thought XML was dead), I can set almost everything that describes my project. It even assumes a given <a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">standard directory structure</a>, which I strongly believe is preventing every ego in an enterprise from coming up with its own.</p>

<h2>Le <code>pom.xml</code></h2>

<p>A <code>pom.xml</code> file is rather intuitive. Start with a simple XML skeleton using the <code>project</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span>
</span><span class='line'>    <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
</span><span class='line'>    <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">        http://maven.apache.org/POM/4.0.0</span>
</span><span class='line'><span class="s">        http://maven.apache.org/xsd/maven-4.0.0.xsd</span>
</span><span class='line'><span class="s">    &quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>modelVersion</code> tag in this example. It states the version of the object model this POM is using. General rule, it doesn&rsquo;t change so I keep it in the skeleton.</p>

<p>Next we add some basic information regarding this project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- Basics --&gt;</span>
</span><span class='line'><span class="nt">&lt;groupId&gt;</span>com.iampfac<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'><span class="nt">&lt;artifactId&gt;</span>example<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'><span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;packaging&gt;</span>war<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'><span class="nt">&lt;name&gt;</span>Example<span class="nt">&lt;/name&gt;</span>
</span><span class='line'><span class="nt">&lt;description&gt;</span>An Example. Duh!<span class="nt">&lt;/description&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I believe this part is trivial enough. Next we have the properties. These can be used later in the file using the <code>${...}</code> notation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- Properties --&gt;</span>
</span><span class='line'><span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;very.useful.property&gt;</span>very useful value<span class="nt">&lt;/very.useful.property&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'><span class="nt">&lt;/properties&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For instance, one use the <code>${very.useful.property}</code> as the value for other tags in the document, and it would be the same as writing the value directly (but more DRY). The basic information tags also have their equivalent properties, but their value may not be the value of a property. So using the <code>${...}</code> to set the value of one of those tags would not work. As an example, the <code>artifactId</code> tag sets the value for <code>${project.artifactId}</code>.</p>

<p>Next, the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- Dependencies --&gt;</span>
</span><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.example<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>java-lib<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>war<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;exclusions&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;exclusion&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.example.another<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>unwanted-lib<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/exclusion&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/exclusions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that what identifies a dependency is the same information that we set above in the basics section of our POM file. Maven repositories use this information to index the packages. <code>type</code> and <code>scope</code> tags are optional and define the type of dependency and the scope where it is required; by default they hold the values <code>jar</code> and <code>compile</code>, respectively.</p>

<p><code>exclusions</code> is also an optional tag but a little more special, as it allows to exclude any unwanted dependency of our dependency. For instance, the <code>spring-core</code> package includes the <code>commons-logging</code> package, but one may prefer to use SLF4J, in which case the <code>commons-logging</code> package would have to be included in the <code>exclusions</code> tag.</p>

<p>Lastly, the build related stuff:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;finalName&gt;</span>${project.artifactId}<span class="nt">&lt;/finalName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.example<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven.plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can set the name of the package to be generated when building this project (for example, when the project is an webapp we can set the name of the resulting <code>.war</code> file), and add plugins which perform additional tasks like running tests, customizing the build process, etc&hellip;</p>

<h2>Conclusion</h2>

<p>Honestly I don&rsquo;t know at this moment what else I can write about Maven, and since this post is already long I&rsquo;ll wrap it here. Maybe I&rsquo;ll add a section later with an example of how to structure the project with multiple POM files. If I feel like it.</p>

<p><img class="center" src="http://blog.iampfac.com/images/deal-with-it.gif" title="&#34;My blog, my rulez!&#34;" alt="&#34;My blog, my rulez!&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Joining Spree Along The Rails]]></title>
    <link href="http://blog.iampfac.com/blog/2013/07/22/a-joining-spree-along-the-rails/"/>
    <updated>2013-07-22T23:01:00+01:00</updated>
    <id>http://blog.iampfac.com/blog/2013/07/22/a-joining-spree-along-the-rails</id>
    <content type="html"><![CDATA[<p>How to use ActiveRecord to perform a chain of nested <code>INNER JOIN</code> operations.</p>

<!-- more -->


<h2>TL;DR</h2>

<p>&ldquo;<strong>I want to know all the distinct <em>option values</em> of the <em>option type</em> &#8220;gender&rdquo;, but only for the <em>products</em> associated with a given <em>category</em></strong>&#8221;</p>

<p>translates to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spree</span><span class="o">::</span><span class="no">OptionValue</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:variants</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:product</span> <span class="o">=&gt;</span> <span class="ss">:classifications</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:option_type_id</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:spree_products_taxons</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:taxon_id</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure>


<p>assuming that the given <em>category</em> has the taxon ID 2 and that the <em>gender</em> option type has ID 1.</p>

<p>The Spree 1.3 models:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Spree</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">OptionValue</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:option_type</span>
</span><span class='line'>    <span class="n">has_and_belongs_to_many</span> <span class="ss">:variants</span><span class="p">,</span> <span class="ss">:join_table</span> <span class="o">=&gt;</span> <span class="s1">&#39;spree_option_values_variants&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">OptionType</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:option_values</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Variant</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:product</span>
</span><span class='line'>    <span class="n">has_and_belongs_to_many</span> <span class="ss">:option_values</span><span class="p">,</span> <span class="ss">:join_table</span> <span class="o">=&gt;</span> <span class="ss">:spree_option_values_variants</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:classifications</span><span class="p">,</span> <span class="ss">:dependent</span> <span class="o">=&gt;</span> <span class="ss">:delete_all</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:taxons</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:classifications</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:variants</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Classification</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">table_name</span> <span class="o">=</span> <span class="s1">&#39;spree_products_taxons&#39;</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:product</span>
</span><span class='line'>    <span class="n">belongs_to</span> <span class="ss">:taxon</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The schema:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;spree_option_values&quot;</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;option_type_id&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;spree_products_taxons&quot;</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;product_id&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;taxon_id&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Explain</h2>

<p>Lately, I&rsquo;ve working on this project for an online store in Rails, and for that I&rsquo;m using Spree. In this store, every product belongs to a category, and every product has the option type <em>gender</em> (man or woman). In every view&rsquo;s header there is a main navigation bar with a button for each category. Each button also has a dropdown menu for the available genders, so the user can easily see all the products for man in category A, for example.</p>

<p>The dropdown menus are not the same for all the categories. In other words, <code>CategoryA</code> has both <code>man</code> and <code>woman</code> in its dropdown menu, while <code>CategoryB</code> has only <code>woman</code>. As such, the dropdown is hard-coded for each button, which means that the navigation menu is completely hard-coded. This is ugly, hard to maintain and unnecessary, so I decided to change it to show the genders for which there are in fact products in each category.</p>

<h3>Models and Schema</h3>

<p>As you can see in the <strong>TL;DR</strong> section:</p>

<ul>
<li>An <code>OptionValue</code> has and belongs to many <code>Variants</code> (with the join table <code>spree_option_values_variants</code>)</li>
<li>An <code>OptionValue</code> belongs to an <code>OptionType</code></li>
<li>A <code>Variant</code> belongs to a <code>Product</code></li>
<li>A <code>Product</code> has many <code>Classifications</code> (which use the table <code>spree_products_taxons</code>)</li>
<li>A <code>Classification</code> also belongs to a <code>Taxon</code></li>
<li>A <code>Taxon</code> belongs to a <code>Taxonomy</code></li>
</ul>


<p>This store only has one taxonomy named <em>Category</em>. All the categories are taxons that belong to this taxonomy.</p>

<p>In order to make the menu dynamic I have to be able to obtain the gender values used among the products of a given category. In other words, <strong>I want to know all the distinct <em>option values</em> of the <em>option type</em> &ldquo;gender&rdquo;, but only for the <em>products</em> associated with a given <em>category</em></strong>.</p>

<h3>SQL</h3>

<p>If I was using SQL directly, my life would be easier. Let&rsquo;s assume that my <em>gender</em> option type has de ID 1 and that my taxon (category) has the ID 4. I can easily translate what I want into a single query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">spree_option_values</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">spree_option_values</span><span class="p">,</span> <span class="n">spree_option_values_variants</span><span class="p">,</span> <span class="n">spree_variants</span><span class="p">,</span> <span class="n">spree_products_taxons</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">spree_option_values</span><span class="p">.</span><span class="n">option_type_id</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">AND</span> <span class="n">spree_option_values</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">spree_option_values_variants</span><span class="p">.</span><span class="n">option_value_id</span>
</span><span class='line'>    <span class="k">AND</span> <span class="n">spree_option_values_variants</span><span class="p">.</span><span class="n">variant_id</span> <span class="o">=</span> <span class="n">spree_variants</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'>    <span class="k">AND</span> <span class="n">spree_variants</span><span class="p">.</span><span class="n">product_id</span> <span class="o">=</span> <span class="n">spree_products_taxons</span><span class="p">.</span><span class="n">product_id</span>
</span><span class='line'>    <span class="k">AND</span> <span class="n">spree_products_taxons</span><span class="p">.</span><span class="n">taxon_id</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yet, using ActiveRecord I access my records usually using some kind of <code>&lt;class&gt;.where(&lt;conditions&gt;)</code>. How do I get to that result?</p>

<h3>Join</h3>

<p>Formally, what happens in that previous SQL query, as intuitive as it might be, is a set of consecutive <code>INNER JOIN</code> operations. Using that operation explicitly, the same query can be rewritten as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">spree_option_values</span><span class="p">.</span><span class="o">*</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">spree_option_values</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">spree_option_values_variants</span>
</span><span class='line'>          <span class="k">ON</span> <span class="n">spree_option_values</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">spree_option_values_variants</span><span class="p">.</span><span class="n">option_value_id</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">spree_variants</span>
</span><span class='line'>          <span class="k">ON</span> <span class="n">spree_variants</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">spree_option_values_variants</span><span class="p">.</span><span class="n">variant_id</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">spree_products_taxons</span>
</span><span class='line'>          <span class="k">ON</span> <span class="n">spree_products_taxons</span><span class="p">.</span><span class="n">product_id</span> <span class="o">=</span> <span class="n">spree_variants</span><span class="p">.</span><span class="n">product_id</span>
</span><span class='line'>         <span class="k">AND</span> <span class="n">spree_products_taxons</span><span class="p">.</span><span class="n">taxon_id</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">spree_option_values</span><span class="p">.</span><span class="n">option_type_id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the way ActiveRecord allows to do this kind of searches, through the <code>join</code> method. Let&rsquo;s skip to the answer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spree</span><span class="o">::</span><span class="no">OptionValue</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:variants</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:product</span> <span class="o">=&gt;</span> <span class="ss">:classifications</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:option_type_id</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:spree_products_taxons</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:taxon_id</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>join</code> method uses the <strong>associations</strong> names to perform the joins, instead of using the table names. This is why instead of using <code>:spree_products_taxons</code> we use <code>:classifications</code>. In this specific case, the join creates a chain: we want to chain the variants of an option value, using the product of each of those variants to get to the taxons.</p>

<p>Lastly, notice the <code>where</code> clause. When referring to the fields of the initial table (option values), using the field normally is enough. For the remaining tables, the table name and a hash of conditions is used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: a first impression]]></title>
    <link href="http://blog.iampfac.com/blog/2013/04/25/octopress-a-first-impression/"/>
    <updated>2013-04-25T01:17:00+01:00</updated>
    <id>http://blog.iampfac.com/blog/2013/04/25/octopress-a-first-impression</id>
    <content type="html"><![CDATA[<p>A first post with Octopress. Just so I can see stuff.</p>

<!--more-->




<blockquote><p>I have no wife. No children. I won’t have a legacy. The only thing the world will know me for is <span class="underline">chunky bacon</span>.</p><footer><strong>why the lucky stiff</strong> <cite><a href='http://mislav.uniqpath.com/poignant-guide/'>Why&#8217;s (Poignant) Guide to Ruby</a></cite></footer></blockquote>


<h3>Why today</h3>

<p>Today I decided I would start my Octopress blog, &ldquo;finally&rdquo;. Like so many others, I have been postponing it since I can remember (a common thing among devs it seems). And, after years of failed attempts, from <a href="www.blogger.com">Blogger</a> to <a href="wordpress.com">Wordpress</a>, I finally went for <a href="http://octopress.org/">Octopress</a>.</p>

<h3>Why Octopress</h3>

<p>The text visible in the Octopress website, starting from the top: <em>Octopress, a blogging framework for hackers</em>. The only way this could appeal more to me is if it were presented by a hot naked busty woman instead of an yellow octopus.</p>

<p>The thing that nagged me the most in Blogger and Wordpress was the need to login and spend time with writing, formatting the text and then publishing it. And I had to wait for pages to reload. And it seemed stupid.</p>

<p>The same does not happen with Octopress. At the moment, I&rsquo;m in Sublime Text, writing and formatting at the same time thanks to Markdown, spell checking on-the-fly thanks to Hunspell, and at any moment I can just close my laptop, go somewhere, and resume this just by opening the lid (I really did that, oh I&rsquo;m so happy).</p>

<p>All things taken into account, this really seems the best option for a guy like me. I wonder for how long&hellip;</p>

<h3>Lastly a little story</h3>

<p>It&rsquo;s my last day in training: I&rsquo;m training to be a trainer (ah, recursion in life) and I just spent the last hour fighting Octopress, instead of watching the last simulation of my class mates.</p>

<p><em>Why?</em>, you ask.</p>

<p>Just because. I decided I wanted to use <a href="http://slim-lang.com/">Slim</a> but ended up using the default Markdown.</p>

<p><em>Why?</em> you ask, yet again.</p>

<p>Because I don&rsquo;t like closing tags in ERB, and since Slim does the same as Haml with less writing, it seemed perfect. But it wasn&rsquo;t. It wasn&rsquo;t because I wanted to quote why the lucky stiff. And for that I decided I would use Twitter Bootstrap.</p>

<p><em>Why???</em>, you keep asking (god you&rsquo;re annoying).</p>

<p>Because it&rsquo;s pretty, and I like pretty. And since it has support for pretty quotes, it&rsquo;s just what I needed. So I spent an hour figuring out the <strong>right way</strong> to add it to the blog.</p>

<p><em>Aaaand?</em>, you ask impatiently, an obvious signal that reading this post is turning out to be such an interesting experience.</p>

<p>Wrapping up, when I was almost done, I opened the <code>plugins</code> directory. And there it was: a component just for pretty <code>blockquotes</code>. And here I was, <del>wasting</del> investing my time. Story of my life.</p>

<p>If now you&rsquo;re asking how is this relevant, it is not. I just wanted to let some steam off and use more Markdown.</p>

<h6>EDIT</h6>

<p>Added an excerpt separator, this was getting ridiculous in the front page. (I know, Octopress defaults make no sense but I lack the time and/or will to change it).</p>
]]></content>
  </entry>
  
</feed>
